package be.nplusone {	import jp.progression.casts.*;	import jp.progression.commands.display.*;	import jp.progression.commands.lists.*;	import jp.progression.commands.managers.*;	import jp.progression.commands.media.*;	import jp.progression.commands.net.*;	import jp.progression.commands.tweens.*;	import jp.progression.commands.*;	import jp.progression.data.*;	import jp.progression.events.*;	import jp.progression.scenes.*;		import flash.system.*;	import flash.display.*;	import flash.events.*;	import flash.text.*	import flash.net.*		/**	 * ...	 * @author Kenji Takasaki	 */		public class Layout extends Command {				private var _stage:Object;		private var _target:Object;		private var _resizing:String;		private var _initX:Number;		private var _initY:Number;		private var _initWidth;		private var _initHeight;				/**		 * 新しい Layout インスタンスを作成します。		 */		public function Layout(stageObj:Object, target:Object, resizing:String, initX:Number = 0, initY:Number = 0, initWidth:Number = 0, initHeight:Number = 0, initObject:Object = null ) {					// 親クラスを初期化します。			super( _execute, _interrupt, initObject );						_initX = initX;			_initY = initY;			_resizing = resizing;						// 引数を設定する			_stage = stageObj;			_target = target;						if (initWidth == 0) {			_initWidth = target.width;			}else{			_initWidth = initWidth;			}			if (initHeight == 0) {			_initHeight = target.height;			}else{			_initHeight = initHeight;			}							}				/**		 * 実行されるコマンドの実装です。		 */		private function _execute():void {			switch (_resizing) {			case "stayCenter" :			stayCenter();			_stage.addEventListener( Event.RESIZE, stayCenter );			break;			case "centerbottom" :			centerbottom();			_stage.addEventListener( Event.RESIZE, centerbottom );			break			case "insideFull" :			insideFull();			_stage.addEventListener( Event.RESIZE, insideFull );			break;			case "justFit" :			justFit();			_stage.addEventListener( Event.RESIZE, justFit );			break;			case "justFitLeft" :			justFitLeft();			_stage.addEventListener( Event.RESIZE, justFitLeft );			break;			case "justFitReflect" :			justFitReflect();			_stage.addEventListener( Event.RESIZE, justFitReflect );			break;			case "insideFullReflect" :			insideFullReflect();			_stage.addEventListener( Event.RESIZE, insideFullReflect );			break;			case "insideFullCenter" :			insideFullCenter();			_stage.addEventListener( Event.RESIZE, insideFullCenter );			break;			case "insideCrop" :			insideCrop();			_stage.addEventListener( Event.RESIZE, insideCrop );			break;			case "leftbottom" :			leftbottom();			_stage.addEventListener( Event.RESIZE, leftbottom );			break;			case "leftmiddle" :			leftmiddle();			_stage.addEventListener( Event.RESIZE, leftmiddle );			break;			case "rightup" :			rightup();			_stage.addEventListener( Event.RESIZE, rightup );			break;			case "rightmiddle" :			rightmiddle();			_stage.addEventListener( Event.RESIZE, rightmiddle );			break;			case "rightbottom" :			rightbottom();			_stage.addEventListener( Event.RESIZE, rightbottom );			break;			case "rightFull" :			rightFull();			_stage.addEventListener( Event.RESIZE, rightFull );			break;			case "rightFullReflect" :			rightFullReflect();			_stage.addEventListener( Event.RESIZE, rightFullReflect );			break;			case "insideFilledX" :			insideFilledX();			_stage.addEventListener( Event.RESIZE, insideFilledX );			break;			case "fillleft" :			fillleft();			_stage.addEventListener( Event.RESIZE, fillleft );			break;			case "fillcenter" :			fillcenter();			_stage.addEventListener( Event.RESIZE, fillcenter );			break;			case "fillright" :			fillright();			_stage.addEventListener( Event.RESIZE, fillright );			break;			}			executeComplete();		}				/**		 * 中断されるコマンドの実装です。		 */		private function _interrupt():void {		}				/**		 * インスタンスのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。		 */		override public function clone():Command {			return new Layout( _stage, _target, _resizing, _target.x, _target.y, _target.width, _target.height, this );		}				private function stayCenter( event:Event = null ):void		{			_target.x = _stage.stageWidth / 2+_initX;			_target.y = _stage.stageHeight /2+_initY;		}				private function centerbottom( event:Event = null ):void		{			_target.x = _stage.stageWidth / 2+_initX;			_target.y = _stage.stageHeight + _initY;		}				private function justFit( event:Event = null ):void		{			_target.x = 0+_initX;			_target.y = 0+_initY;			_target.width = _stage.stageWidth;			_target.height = _stage.stageHeight;		}				private function justFitLeft( event:Event = null ):void		{			_target.width = _initWidth;			_target.height = _stage.stageHeight;		}				private function justFitReflect( event:Event = null ):void		{			_target.x = _stage.stageWidth+_initX;			_target.y = _stage.stageHeight+_initY;			_target.width = _stage.stageWidth;			_target.height = _stage.stageHeight;		}				private function leftbottom( event:Event = null ):void		{			_target.x = _initX;			_target.y = _stage.stageHeight + _initY;		}				private function leftmiddle( event:Event = null ):void		{			_target.x = _initX;			_target.y = _stage.stageHeight/2 + _initY;		}				private function rightup ( event:Event = null ):void		{			_target.x = _stage.stageWidth + _initX;			_target.y = _initY;		}				private function rightmiddle ( event:Event = null ):void		{			_target.x = _stage.stageWidth + _initX;			_target.y = _stage.stageHeight/2 + _initY;		}				private function rightbottom ( event:Event = null ):void		{			_target.x = _stage.stageWidth+_initX;			_target.y = _stage.stageHeight+_initY;		}				private function rightFull ( event:Event = null ):void		{			_target.x = _stage.stageWidth+_initX;			_target.height = _stage.stageHeight;		}						private function rightFullReflect ( event:Event = null ):void		{			_target.x = _stage.stageWidth+_initX;			_target.y = _stage.stageHeight+_initY;			_target.height = _stage.stageHeight;		}				private function insideCrop ( event:Event = null ):void		{			var nBASE_WIDTH:Number = _initWidth;			var nBASE_HEIGHT:Number = _initHeight;			var nScaleY:Number = _stage.stageHeight / nBASE_HEIGHT;						_target.scaleY = nScaleY;			_target.scaleX = nScaleY;						_target.x = _stage.stageWidth / 2 - (_initWidth * nScaleY) / 2;			_target.y = 0;		}				private function insideFilledX ( event:Event = null ):void		{				var nBASE_WIDTH:Number = _initWidth;			var nBASE_HEIGHT:Number = _initHeight;			var nScaleX:Number = _stage.stageWidth / nBASE_WIDTH;						_target.scaleY = nScaleX;			_target.scaleX = nScaleX;						_target.x = 0;			_target.y = _stage.stageHeight / 2 - (nBASE_HEIGHT * nScaleX) / 2		}				private function insideFull( event:Event = null ):void		{			var nBASE_WIDTH:Number = _initWidth;			var nBASE_HEIGHT:Number = _initHeight;						var nScaleX:Number = _stage.stageWidth / nBASE_WIDTH ;			var nScaleY:Number = _stage.stageHeight / nBASE_HEIGHT ;			var nFixScale:Number = Math.max( nScaleX, nScaleY ) ;						_target.scaleX = nFixScale ;			_target.scaleY = _target.scaleX ;						_target.x = Math.floor( ( _stage.stageWidth - nBASE_WIDTH * nFixScale ) / 2 )+_initX;			_target.y = Math.floor( ( _stage.stageHeight - nBASE_HEIGHT * nFixScale ) / 2 )+_initY;					}						private function insideFullReflect( event:Event = null ):void		{			var nBASE_WIDTH:Number = _initWidth;			var nBASE_HEIGHT:Number = _initHeight;						var nScaleX:Number = _stage.stageWidth / nBASE_WIDTH ;			var nScaleY:Number = _stage.stageHeight / nBASE_HEIGHT ;			var nFixScale:Number = Math.max( nScaleX, nScaleY ) ;						_target.scaleX = nFixScale ;			_target.scaleY = _target.scaleX ;			_target.x = _target.width + _initX;			_target.y = _target.height + _initY;				}				private function insideFullCenter( event:Event = null ):void		{			var nBASE_WIDTH:Number = _initWidth;			var nBASE_HEIGHT:Number = _initHeight;						var nScaleX:Number = _stage.stageWidth / nBASE_WIDTH ;			var nScaleY:Number = _stage.stageHeight / nBASE_HEIGHT ;			var nFixScale:Number = Math.max( nScaleX, nScaleY ) ;						_target.scaleX = nFixScale ;			_target.scaleY = _target.scaleX ;				_target.x = _stage.stageWidth/2;			_target.y = _stage.stageHeight/2;			}				private function fillleft( event:Event = null ):void		{			_target.width = _stage.stageWidth/3;			_target.height = _stage.stageHeight+200;		}				private function fillcenter( event:Event = null ):void		{			_target.x = _stage.stageWidth/3;			_target.width = _stage.stageWidth/3;			_target.height = _stage.stageHeight+200;		}				private function fillright( event:Event = null ):void		{			_target.x = (_stage.stageWidth/3)*2;			_target.width = _stage.stageWidth/3;			_target.height = _stage.stageHeight+200;		}	}}