package be.nplusone {	import jp.progression.casts.*;	import jp.progression.commands.display.*;	import jp.progression.commands.lists.*;	import jp.progression.commands.net.*;	import jp.progression.commands.tweens.*;	import jp.progression.commands.*;	import jp.progression.data.*;	import jp.progression.events.*;	import jp.progression.scenes.*;		import flash.display.*;	import flash.events.*;	import flash.text.*	import flash.net.*	import flash.utils.*;		import caurina.transitions.Tweener;	import caurina.transitions.properties.ColorShortcuts;	import caurina.transitions.properties.FilterShortcuts;		FilterShortcuts.init();			/**	 * ...	 * @author Kenji Takasaki	 */	public class Gallery extends CastMovieClip {				public var rHeight:Number;				private var n = 2;		private var t = "easeOutSine"		private	var n1 = 1.5;		private var n2 = 0.75;		private var n3 = 10;				private var t1 = "easeOutSine"		private var t2 = "easeInOutBack"		/**		 * 新しい Gallery インスタンスを作成します。		 */		 		public function Gallery ( thumPath, imgPath, xdata, xb, xm, ydata, yb, photoList:XML, thumWidth, thumHeight, sceneUrl:String, initObject:Object = null ) {						// 親クラスを初期化します。			super( initObject );			var list = new SerialList();			var photoNum = photoList.scene.length();			for ( var i:int = 0; i < photoNum; i++ ) {			var thumnail = new Thumnail();		    thumnail.thumWidth = thumWidth;			thumnail.thumHeight = thumHeight;			thumnail.imageUrl = thumPath + photoList.scene[i].imageUrl;						thumnail.sceneId = new SceneId(sceneUrl + photoList.scene[i].@name);						var photograph = new Photograph(); 			photograph.imageUrl = imgPath + photoList.scene[i].imageUrl;			photograph.id = photoList.scene[i].@name;						ResourcePrefetcher.addRequest(new URLRequest(imgPath + photoList.scene[i].imageUrl));						thumnail.x = xdata * (i % xm) + xb;			thumnail.y = Math.floor(i / xm) * ydata + yb;						list.addCommand(			new AddChild( this, thumnail )			);			}			list.execute();			rHeight = (Math.floor(photoNum / xm) + 1) * ydata + yb;		}				public function addPhoto ():void {					}				/**		 * IExecutable オブジェクトが AddChild コマンド、または AddChildAt コマンド経由で表示リストに追加された場合に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastAdded():void {					}				override protected function atCastRemoved():void {		}			}}