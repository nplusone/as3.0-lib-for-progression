package be.nplusone {	import jp.progression.casts.*;	import jp.progression.commands.display.*;	import jp.progression.commands.lists.*;	import jp.progression.commands.net.*;	import jp.progression.commands.tweens.*;	import jp.progression.commands.*;	import jp.progression.data.*;	import jp.progression.events.*;	import jp.progression.scenes.*;		import caurina.transitions.properties.SoundShortcuts;	import caurina.transitions.properties.FilterShortcuts;		import flash.system.*;	import flash.display.*;	import flash.events.*;	import flash.text.*	import flash.net.*		import jp.kimulabo.display.*	import stages.*		SoundShortcuts.init();  	FilterShortcuts.init();			/**	 * ...	 * @author Kenji Takasaki	 */	public class Photograph extends CastMovieClip {				public var loading:LoadingCircle;		public var flagOut:Boolean;				private var photo:CastBitmap;		private var _imageUrl:String;	    private var flag:Boolean;		private var	n1 = 0.75;		private var	n2 = 1;		private var	n3 = 1.25;		private var	t1 = "easeOutQuad"		private var	t2 = "easeInQuad"		/**		 * 新しい Photograph インスタンスを作成します。		 */		public function Photograph( value:String, initObject:Object = null ) {			// 親クラスを初期化します。			super( initObject );			loading = new LoadingCircle();			_imageUrl = value;		}				/**		 * IExecutable オブジェクトが AddChild コマンド、または AddChildAt コマンド経由で表示リストに追加された場合に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastAdded():void {									if (getResourceById(_imageUrl)) { 			onLoadPhoto();			} else {			var list = new SerialList();			list.addCommand(			new AddChild(this, loading),			[			new LoadBitmapData (new URLRequest(_imageUrl), { onComplete:function():void {			onLoadPhoto();			}})			]			);			list.execute();			}					}				/**		 * IExecutable オブジェクトが RemoveChild コマンド、または RemoveAllChild コマンド経由で表示リストから削除された場合に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		protected override function atCastRemoved():void {						addCommand(			new DoTweener( photo, { alpha:0, time:n1, transition:t1 } ),			[			new RemoveChild( this, photo )			]			);					}					private function onLoadPhoto ( ) {						photo = new CastBitmap(getResourceById(_imageUrl).toBitmapData())			photo.alpha = 0;			photo.smoothing = true;						var list = new SerialList();			list.addCommand(			new DoTweener( loading, { alpha:0, time:n2, transition:t1 } ),			[			new AddChildAt( this, photo, 0),			new DoTweener( photo, { alpha:1, time:n2, transition:t1 } )			]			);			list.execute();					}	}}