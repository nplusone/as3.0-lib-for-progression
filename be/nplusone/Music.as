package be.nplusone {		import jp.progression.casts.*;	import jp.progression.commands.display.*;	import jp.progression.commands.lists.*;	import jp.progression.commands.managers.*;	import jp.progression.commands.media.*;	import jp.progression.commands.net.*;	import jp.progression.commands.tweens.*;	import jp.progression.commands.*;	import jp.progression.data.*;	import jp.progression.events.*;	import jp.progression.scenes.*;		import flash.system.*;	import flash.display.*;	import flash.events.*;	import flash.text.*	import flash.net.*	import flash.media.*	import flash.utils.*		import caurina.transitions.properties.SoundShortcuts;	import caurina.transitions.properties.FilterShortcuts;		SoundShortcuts.init();  	FilterShortcuts.init();			/**	 * ...	 * @author Kenji Takasaki	 */	public class Music extends CastMovieClip {				private var _path:String;		private var _times:Number;		private var snd:Sound;		private var sndCh:SoundChannel;				private var n1 = 0.75;		private var n2 = 1;		private var n3 = 1.25;		private var t1 = "easeOutQuad"		private var t2 = "easeInQuad"				private var soundTrans:ByteArray;				/**		 * 新しい Music インスタンスを作成します。		 */		public function Music ( musicPath:String, times:Number = 1000, initObject:Object = null ) {			// 親クラスを初期化します。			super( initObject );			_path = musicPath;			_times = times;			soundTrans = new ByteArray();			snd = new Sound();			snd.load(new URLRequest(_path));		}				/**		 * IExecutable オブジェクトが AddChild コマンド、または AddChildAt コマンド経由で表示リストに追加された場合に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastAdded():void {			sndCh = snd.play(0, _times);		}				/**		 * IExecutable オブジェクトが RemoveChild コマンド、または RemoveAllChild コマンド経由で表示リストから削除された場合に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastRemoved():void {		}				public function playMusic():void {			sndCh.stop();			sndCh = snd.play(0,1000); 			}				public function stopMusic():void {			//	表示リストに追加するコマンドの作成			var list:SerialList = new SerialList();			list.addCommand(				new DoTweener (sndCh, { _sound_volume:0, time:n1,  transition:t1 })			);			list.execute();		}				public function Spec():Number {			SoundMixer.computeSpectrum(soundTrans, true, 0);			var num:Number = soundTrans.readFloat() * 3			return num;		}				public function PlayPercent():Number {			var num:Number = Math.floor(sndCh.position / snd.length * 100);			return num;		}	}}