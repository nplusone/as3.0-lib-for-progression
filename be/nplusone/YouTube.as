package be.nplusone{	import jp.progression.casts.*;	import jp.progression.commands.display.*;	import jp.progression.commands.lists.*;	import jp.progression.commands.managers.*;	import jp.progression.commands.media.*;	import jp.progression.commands.net.*;	import jp.progression.commands.tweens.*;	import jp.progression.commands.*;	import jp.progression.data.*;	import jp.progression.events.*;	import jp.progression.executors.*;	import jp.progression.scenes.*;		import caurina.transitions.Tweener;	import caurina.transitions.properties.ColorShortcuts;	ColorShortcuts.init();		import be.nplusone.*;	import flash.system.*;	import flash.display.*;	import flash.events.*;	import flash.text.*;	import flash.net.*;		import buttons.*;	import stages.*;	import pages.*;	/**	 * ...	 * @author Kenji Takasaki	 */	public class YouTube extends SceneObject {		private var page:VideoPage;		private var loader:Loader;		private var player:Object;		private var _videoUrl:String;		private var n1:Number;		private var n2:Number;		private var n3:Number;		private var t1:String;		private var t2:String;		private var _transition:String;		private var _duration:String;		private var index:IndexScene;		private var back:BlackBack;		private var back2:BlackBack2;		private var loading:LoadingBar;				private var vflag:Boolean;		private var bflag:Boolean;		private var fflag:Boolean;				private var volArr:Array;				/**		 * 新しい YouTube インスタンスを作成します。		 */		public function YouTube() {			// シーンタイトルを設定します。			title = "にほんごの木";			Security.allowDomain("*");			index = IndexScene(getSceneById("index"));			n1 = index.n1;			n2 = index.n2;			n3 = index.n3;			t1 = index.t1;			t2 = index.t2;			back = new BlackBack();			back2 = new BlackBack2();			page = new VideoPage();			loading = new LoadingBar();			loading.alpha = 0;			loader = new Loader();						vflag = true;			bflag = false;			fflag = false;						volArr = [];			volArr.push(page.control._volcon.vol1);			volArr.push(page.control._volcon.vol2);			volArr.push(page.control._volcon.vol3);			volArr.push(page.control._volcon.vol4);			volArr.push(page.control._volcon.vol5);			volArr.push(page.control._volcon.vol6);		}				public function set videoUrl(value:String ) {			_videoUrl = value;		}				/**		 * シーン移動時に目的地がシーンオブジェクト自身もしくは子階層だった場合に、階層が変更された直後に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atSceneLoad():void {				}		/**		* シーンオブジェクト自身が目的地だった場合に、到達した瞬間に送出されます。		* このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		*/		override protected function atSceneInit():void {				var backIndex = getInstanceById("back");		backIndex.stopLeaves();		var apiPlayerUrl:String = "http://www.youtube.com/apiplayer?version=3";		loader.contentLoaderInfo.addEventListener(Event.INIT, onLoaderInit);		loader.load(new URLRequest(apiPlayerUrl));		}				private function onLoaderInit(e:Event) {		xSetSize();		stage.addEventListener(Event.RESIZE, xSetSize);		page.addChildAt(loader, 1),		page.addChildAt(back2, 2),		back2.visible = false;		var list = new SerialList();		list.addCommand(		[		new Layout(stage, back, "justFit" ),		],		[		new AddChildAt(container, back, 25),		new AddChildAt(container, page, 30),		]		);		list.execute();		loader.content.addEventListener("onReady", onPlayerReady);		loader.content.addEventListener("onError", onPlayerError);		loader.content.addEventListener("onStateChange", onPlayerStateChange);		loader.content.addEventListener("onPlaybackQualityChange", onVideoPlaybackQualityChange);		page.control._ps._play.visible = true;		page.control._ps._pause.visible = false;		page.control._volcon._mute.visible = false;					page.control._ps._play.onCastMouseDown = function():void {				player.playVideo();				page.control.bar._bar.x = 0;				page.control._ps._play.visible = false;				page.control._ps._pause.visible = true;			}						page.control._ps._pause.onCastMouseDown = function():void {				player.pauseVideo();				page.control._ps._pause.visible = false;				page.control._ps._play.visible = true;			}						page.control._volcon._mute.onCastMouseDown = function():void {				if(vflag){				player.mute();				page.control._volcon._vol.visible = false;				page.control._volcon._mute.visible = true;				vflag = false;				} else {				player.unMute();					page.control._volcon._mute.visible = false;				page.control._volcon._vol.visible = true;				vflag = true;				}			}						page.control._volcon._vol.onCastMouseDown = function():void {				if(vflag){				player.mute();				page.control._volcon._vol.visible = false;				page.control._volcon._mute.visible = true;				vflag = false;				} else {				player.unMute();					page.control._volcon._mute.visible = false;				page.control._volcon._vol.visible = true;				vflag = true;				}			}						page.control._volcon.vol1.onCastMouseDown = function():void {			player.setVolume(17);			var list = new SerialList();			list.addCommand(			new DoTweener(volArr[0], { _color:0x808080, time:n1 } )			);			list.execute();			var tlist:TweenList = new TweenList(n1);			for (var i:int = 0; i < 5; i++) {			var n:int = i + 1;			tlist.addCommand(			new DoTweener(volArr[n], { _color:0x333333, time:n1 } )			);			}			tlist.execute();			}						page.control._volcon.vol2.onCastMouseDown = function():void {			player.setVolume(34);						var tlist1:TweenList = new TweenList(n1);			for (var i:int = 0; i < 2; i++) {			tlist1.addCommand(			new DoTweener(volArr[i], { _color:0x808080, time:n1 } )			);			}			tlist1.execute();						var tlist2:TweenList = new TweenList(n1);			for (var i:int = 0; i < 4; i++) {			var n:int = i + 2;			tlist2.addCommand(			new DoTweener(volArr[n], { _color:0x333333, time:n1 } )			);			}			tlist2.execute();						}						page.control._volcon.vol3.onCastMouseDown = function():void {			player.setVolume(51);						var tlist1:TweenList = new TweenList(n1);			for (var i:int = 0; i < 3; i++) {			tlist1.addCommand(			new DoTweener(volArr[i], { _color:0x808080, time:n1 } )			);			}			tlist1.execute();						var tlist2:TweenList = new TweenList(n1);			for (var i:int = 0; i < 3; i++) {			var n:int = i + 3;			tlist2.addCommand(			new DoTweener(volArr[n], { _color:0x333333, time:n1 } )			);			}			tlist2.execute();						}						page.control._volcon.vol4.onCastMouseDown = function():void {			player.setVolume(68);						var tlist1:TweenList = new TweenList(n1);			for (var i:int = 0; i < 4; i++) {			tlist1.addCommand(			new DoTweener(volArr[i], { _color:0x808080, time:n1 } )			);			}			tlist1.execute();						var tlist2:TweenList = new TweenList(n1);			for (var i:int = 0; i < 2; i++) {			var n:int = i + 4;			tlist2.addCommand(			new DoTweener(volArr[n], { _color:0x333333, time:n1 } )			);			}			tlist2.execute();						}						page.control._volcon.vol5.onCastMouseDown = function():void {			player.setVolume(85);						var tlist1:TweenList = new TweenList(n1);			for (var i:int = 0; i < 5; i++) {			tlist1.addCommand(			new DoTweener(volArr[i], { _color:0x808080, time:n1 } )			);			}			tlist1.execute();						var tlist2:TweenList = new TweenList(n1);			tlist2.addCommand(			new DoTweener(volArr[5], { _color:0x333333, time:n1 } )			);			tlist2.execute();						}						page.control._volcon.vol6.onCastMouseDown = function():void {			player.setVolume(100);			var tlist1:TweenList = new TweenList(n1);			for (var i:int = 0; i < 6; i++) {			tlist1.addCommand(			new DoTweener(volArr[i], { _color:0x808080, time:n1 } )			);			}			tlist1.execute();			}						page.control._full._fullOff.visible = false;						page.control._full._fullOn.onCastMouseDown = function():void {				fflag = true;				stage.removeEventListener(Event.RESIZE, xSetSize);				xFull();				stage.addEventListener(Event.RESIZE, xFull);				if (!bflag) {				var list = new SerialList();				list.addCommand(				[				new Wait(3)				]				);				list.onComplete = function():void {					if (!bflag && fflag) {					fadeOutCon();					}				}				list.execute();				}				page.control._full._fullOn.visible = false;				page.control._full._fullOff.visible = true;			}						page.control._full._fullOff.onCastMouseDown = function():void {				fflag = false;				stage.removeEventListener(MouseEvent.MOUSE_MOVE, fadeOutCon);				stage.removeEventListener(Event.RESIZE, xFull);				xSetSize();				stage.addEventListener(Event.RESIZE, xSetSize);				bflag = false;				page.control._full._fullOff.visible = false;				page.control._full._fullOn.visible = true;			}						page.control.bar._seek.onCastMouseDown = function():void {			stage.removeEventListener(Event.ENTER_FRAME, onPlayingPositon);			stage.addEventListener(MouseEvent.MOUSE_MOVE, moveSeek);			}						page.control.bar._seek.onCastMouseUp = function():void {			page.control.bar._seek.x = page.control.bar.mouseX-2;			trace(Math.round(page.control.bar._seek.x/page.control.bar._base.width));			trace(player.getDuration());			var s = Math.round(page.control.bar._seek.x/page.control.bar._base.width * player.getDuration());			trace(s);			player.seekTo(s, true);			stage.removeEventListener(MouseEvent.MOUSE_MOVE, moveSeek);			page.control.bar._bar.x = page.control.bar.mouseX-2;			stage.addEventListener(Event.ENTER_FRAME, onPlayingPositon);			}					}			function onPlayerReady(event:Event):void {				// Event.data contains the event parameter, which is the Player API ID 		trace("player ready:", Object(event).data);		// Once this event has been dispatched by the player, we can use		// cueVideoById, loadVideoById, cueVideoByUrl and loadVideoByUrl		// to load a particular YouTube video.		player = loader.content;		player.setSize(640, 360);		player.setPlaybackQuality("medium");		player.cueVideoByUrl(_videoUrl, 0);		player.setVolume(68);		stage.addEventListener(Event.ENTER_FRAME, onLoadBytes);		}		function onPlayerError(event:Event):void {		// Event.data contains the event parameter, which is the error code		trace("player error:", Object(event).data);		}		function onPlayerStateChange(event:Event):void {		// Event.data contains the event parameter, which is the new player state		trace("player state:", Object(event).data);		if (Object(event).data == 1) {						stage.addEventListener(Event.ENTER_FRAME, onPlayingPositon);		}			}		function onVideoPlaybackQualityChange(event:Event):void {		// Event.data contains the event parameter, which is the new video quality		trace("video quality:", Object(event).data);		}				function onLoadBytes (event:Event):void {		page.control.bar._bar.width = Math.round( player.getVideoBytesLoaded() / player.getVideoBytesTotal() * page.control.bar._base.width);		}				function onPlayingPositon (event:Event):void {		page.control.bar._seek.x = Math.round( player.getCurrentTime() / player.getDuration() * page.control.bar._base.width);		}				function moveSeek (event:Event):void {		page.control.bar._seek.x = page.control.bar.mouseX-2;		}				private function xSetSize (event:Event = null):void {			back2.visible = false;			if(player){			player.setSize(640, 340);			player.setPlaybackQuality("medium");			}			page.x = stage.stageWidth / 2 -320;			page.y = stage.stageHeight / 2 -207;			page.control.x = 0;			page.control.y = 371;			page.control.bar._base.width = 640;			page.control._full.x = 600; 		}				private function xFull (event:Event = null):void {			player.setSize(stage.stageWidth, stage.stageHeight);			player.setPlaybackQuality("default");			back2.y = stage.stageHeight - 70;			back2.visible = true;			page.x = 0;			page.y = 0;			page.control.x = 18;			page.control.y = stage.stageHeight -57;			page.control.bar._base.width = stage.stageWidth -37;			page.control._full.x = stage.stageWidth -80;						stage.addEventListener(MouseEvent.MOUSE_MOVE, fadeOutCon);									back2.onCastRollOver = function():void {				var list = new SerialList();				list.addCommand(				[				new DoTweener(back2, { alpha:1, time:n1, transition:t1 } ),				new DoTweener(page.control, { alpha:1, time:n1, transition:t1 } ),				]				);				list.execute();				bflag = true;			}		}				private function fadeOutCon(event:Event = null):void {						if (stage.mouseY < stage.stageHeight - 70){			var list = new SerialList();			list.addCommand(			[			new DoTweener(back2, { alpha:0, time:n1, transition:t1 } ),			new DoTweener(page.control, { alpha:0, time:n1, transition:t1 } ),			]			);			list.execute();			}		}				/**		* シーンオブジェクト自身が出発地だった場合に、移動を開始した瞬間に送出されます。		* このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		*/		override protected function atSceneGoto():void {		player.stopVideo();		player.destroy();		stage.removeEventListener(Event.ENTER_FRAME, onLoadBytes);		stage.removeEventListener(Event.RESIZE, xSetSize);		stage.removeEventListener(Event.RESIZE, xFull);		stage.removeEventListener(Event.ENTER_FRAME, onPlayingPositon);		loader.contentLoaderInfo.removeEventListener(Event.INIT, onLoaderInit);		loader.content.removeEventListener("onReady", onPlayerReady);		loader.content.removeEventListener("onError", onPlayerError);		loader.content.removeEventListener("onStateChange", onPlayerStateChange);		loader.content.removeEventListener("onPlaybackQualityChange", onVideoPlaybackQualityChange);		addCommand(		[		new RemoveChild(container, page ),		new RemoveChild(container, back ),		],		[		new RemoveChild(page, loader ),		new RemoveChild(page, back2 )		]		);		}			/**		* シーン移動時に目的地がシーンオブジェクト自身もしくは親階層だった場合に、階層が変更される直前に送出されます。		* このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		*/		override protected function atSceneUnload():void {		addCommand(		);		}	}}