package be.nplusone {	import jp.progression.casts.*;	import jp.progression.commands.display.*;	import jp.progression.commands.lists.*;	import jp.progression.commands.managers.*;	import jp.progression.commands.media.*;	import jp.progression.commands.net.*;	import jp.progression.commands.tweens.*;	import jp.progression.commands.*;	import jp.progression.data.*;	import jp.progression.events.*;	import jp.progression.scenes.*;		import flash.system.*;	import flash.display.*;	import flash.events.*;	import flash.text.*	import flash.net.*	import flash.media.*		/**	 * ...	 * @author Kenji Takasaki	 */	public class Movie extends CastMovieClip {				private var _path:String;		private var _movieWidth:Number;		private var _movieHeight:Number;		private var netCon:NetConnection;		private var netStr:NetStream;		private var vid:Video;		private var _loop:Boolean;		/**		 * 新しい Movie インスタンスを作成します。		 */		public function Movie ( moviePath:String,movieWidth:Number, movieHeight:Number, loop = true, initObject:Object = null ) {			// 親クラスを初期化します。			super( initObject );			_path = moviePath;			_movieWidth = movieWidth;			_movieHeight = movieHeight;			_loop = loop;			netCon = new NetConnection();			netCon.connect(null);			// ネットストリームの作成			netStr = new NetStream(netCon);			var obj:Object=new Object();			obj.onMetaData=onMetaData;			netStr.client=obj;			netStr.bufferTime = 5;			// Videoオブジェクトの作成			vid = new Video(_movieWidth,_movieHeight);			vid.smoothing = true;			vid.attachNetStream(netStr);			this.addChild(vid);				}				/**		 * IExecutable オブジェクトが AddChild コマンド、または AddChildAt コマンド経由で表示リストに追加された場合に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastAdded():void {									netStr.play(_path);			netStr.addEventListener(NetStatusEvent.NET_STATUS, onStatusChange );		}				/**		 * IExecutable オブジェクトが RemoveChild コマンド、または RemoveAllChild コマンド経由で表示リストから削除された場合に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastRemoved():void {		}				private function onStatusChange (evt:NetStatusEvent):void {			//trace(evt.info.code);			if ( _loop&&evt.info.code === "NetStream.Play.Stop"){			netStr.removeEventListener(NetStatusEvent.NET_STATUS, onStatusChange );			netStr.play(_path);			netStr.addEventListener(NetStatusEvent.NET_STATUS, onStatusChange );			}		}				private function onMetaData(info:Object):void {		}	}}