package be.nplusone {	import jp.progression.casts.*;	import jp.progression.commands.display.*;	import jp.progression.commands.lists.*;	import jp.progression.commands.net.*;	import jp.progression.commands.tweens.*;	import jp.progression.commands.*;	import jp.progression.data.*;	import jp.progression.events.*;	import jp.progression.scenes.*;		import caurina.transitions.properties.SoundShortcuts;	import caurina.transitions.properties.FilterShortcuts;		import flash.system.*;	import flash.display.*;	import flash.events.*;	import flash.text.*	import flash.net.*		import jp.kimulabo.display.*		SoundShortcuts.init();  	FilterShortcuts.init();				/**	 * ...	 * @author Kenji Takasaki	 */	public class Thumnail extends CastButton {				private var _imageUrl:String;	    private var loading:LoadingCircle;		private	var n1:Number = 3;		private var n2:Number = 1.5;		private var t1:String = "easeOutSine"		private var t2:String = "easeInSine"		/**		 * 新しい PhotoThum インスタンスを作成します。		 */		public function Thumnail( initObject:Object = null ) {			// 親クラスを初期化します。			super( initObject );			this.buttonMode = true;			loading = new LoadingCircle();			loading.alpha = 0;		}				public function set thumWidth (value:Number ){			loading.x = value /2;		}				public function set thumHeight (value:Number ){			loading.y = value /2;		}				public function set imageUrl( value:String ):void 		{						_imageUrl = value;						if (getResourceById(_imageUrl)) { 			onLoadPhoto();			} else {			var list = new SerialList();			list.addCommand(			new AddChild(this, loading),			[			new DoTweener( loading, { alpha:1, time:n2, transition:t1 }),			new LoadBitmapData (new URLRequest(_imageUrl), { onComplete:function():void {			onLoadPhoto();			}})			]			);			list.execute();			}		}				/**		 * IExecutable オブジェクトが AddChild コマンド、または AddChildAt コマンド経由で表示リストに追加された場合に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastAdded():void {					}		/**		 * IExecutable オブジェクトが RemoveChild コマンド、または RemoveAllChild コマンド経由で表示リストから削除された場合に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		protected override function atCastRemoved():void {		}				/**		 * Flash Player ウィンドウの CastButton インスタンスの上でユーザーがポインティングデバイスのボタンを押すと送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		protected override function atCastMouseDown():void {					}				/**		 * ユーザーが CastButton インスタンスからポインティングデバイスを離したときに送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		protected override function atCastMouseUp():void {			addCommand(			new DoTweener( this, { alpha:1, time:n2, transition:t1 } )			);		}				/**		 * ユーザーが CastButton インスタンスにポインティングデバイスを合わせたときに送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		protected override function atCastRollOver():void {			addCommand(			new DoTweener( this, { alpha:0.7, time:n2, transition:t1 } )			);		}				/**		 * ユーザーが CastButton インスタンスからポインティングデバイスを離したときに送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		protected override function atCastRollOut():void {			addCommand(			new DoTweener( this, { alpha:1, time:n2, transition:t1 } )			);		}					private function onLoadPhoto ( ) {			var photo = new CastBitmap(getResourceById(_imageUrl).toBitmapData())			photo.alpha = 0;			var list = new SerialList();			list.addCommand(			new AddChild( this, photo ),			[			new DoTweener( loading, { alpha:0, time:n2, transition:t1 } ),			new DoTweener( photo, { alpha:1, time:n2, transition:t1 } ),			]			);			list.execute();					}	}}